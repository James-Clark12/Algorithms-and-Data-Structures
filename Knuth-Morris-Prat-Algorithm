** Good article explaining the table which is the only difficult bit - http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/

/*
function buildPatternTable(word) {
  const patternTable = [0];
  let prefixIndex = 0;
  let suffixIndex = 1;

  while (suffixIndex < word.length) {
    if (word[prefixIndex] === word[suffixIndex]) {
      patternTable[suffixIndex] = prefixIndex + 1;
      suffixIndex += 1;
      prefixIndex += 1;
    } else if (prefixIndex === 0) {
      patternTable[suffixIndex] = 0;
      suffixIndex += 1;
    } else {
      prefixIndex = patternTable[prefixIndex - 1];
    }
  }

  return patternTable;
}*/


// if you want to check how this works - do it on paper with the string: 'abababca'

const buildPatternTable = (word) => {
    let prefix = 0;
    let suffix = 1;
    const patternTable = [0]; //start with 0 - because a string length 1 has no 'proper' prefixes or suffixes

    while(suffix < word.length) {
        if (word[prefix] === word[suffix]) {
            patternTable[suffix] = prefixIndex + 1; //prefix index + 1 - because prefix is 0 indexed and the index increments in as matches occur
            suffix++; // suffix and prefix both increase - as allows us to see if they continue to match as the string gets longer
            prefix++;
        } else if ( prefix === 0) {
            patternTable[suffix] = 0; // there is no possible match so set as 0 and increment
            suffix++;
        } else if (prefix !== 0) {
            prefix = patternTable[prefix-1]; //there were matches so use the table trick
        }
    }
}

function knuthMorrisPratt(text, word) {
  if (word.length === 0) {
    return 0;
  }

  let textIndex = 0;
  let wordIndex = 0;
  let matches = 0;
  const patternTable = buildPatternTable(word);

  // three options in while loop:
  // 1. Found a complete match
  // 2. Found a mistmatch after some matches
  // 3. Found a mismatch after no matches
  while (textIndex < text.length) {
    // We've found a match.
    if (text[textIndex] === word[wordIndex]) {
      // has the whole word now been matched
      if (wordIndex === word.length - 1) {
        // increment matches
        matches = matches + 1;
        // now we've record the match lets continue as if we just found a mistmatch
        wordIndex = patternTable[wordIndex - 1];
      }
      wordIndex += 1; // making these part of an else makes it clearer I think - although may work withouut the else
      textIndex += 1;
    // we didn't find a match but we had built up some matches
    // therefore we can use the information we matched
    } else if (wordIndex > 0) {
      wordIndex = patternTable[wordIndex - 1];
    // not match and no matches earlier - so let's move on
    } else {
      wordIndex = 0;
      textIndex += 1;
    }
  }

  return matches;
}

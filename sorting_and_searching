
const swap = (array, index1, index2) => {
  const temp = array[index1];
  array[index1] = array[index2];
  array[index2] = temp;
}

// partition index is given a fixed length of the array and a pivot element
// it puts all elements smaller than the pivot elements values to the pivot elements left
// all values greater than the pivot element to its right
// and then returns the index of where the partition value now sits

// const partition = (array, pivot, left, right) => {
//   const pivotValue = array[pivot];
//   let partitionIndex = left;
//
//   for(let i = left; i < right; i++) {
//     if (array[i] < pivotValue) {
//       swap(array, i, partitionIndex);
//       partitionIndex = partitionIndex + 1;
//     }
//   }
//   swap(array, right, partitionIndex);
//   return partitionIndex;
// }
//
// const quickSort = (array, left, right) => {
//   if (left < right) {
//     const pivot = right;
//     const partitionIndex = partition(array, pivot, left, right);
//     quickSort(array, left, partitionIndex - 1);
//     quickSort(array, partitionIndex + 1, right);
//   }
//   return array;
// }

// /*Practice */
//
// const partition = (array, pivot, left, right) => {
//   const partitionValue = array[pivot];
//   let newPartitionIndex = left;
//   for (let i = left; i < right; i++) {
//     if (array[i] < partitionValue) {
//       swap(array, i, newPartitionIndex);
//       newPartitionIndex = newPartitionIndex + 1;
//     }
//   }
//   // the for loop will end with i equal to right (that is what stops it running)
//   // swap the partion value to be ahead of all element below it
//   // it is then in the correct place in the array and doesnt need to be considered again
//   swap(array, right, newPartitionIndex);
//   return newPartitionIndex;
// }
//
// const quickSort = (array, left, right) => {
//   if (left < right) {
//     const pivot = right;
//     const partitionIndex = partition(array, pivot, left, right);
//     // -1 and +1 because we take pivot as right and then find the correct place in array for it with partition so dont need to consider it again
//     quickSort(array, partitionIndex + 1, right);
//     quickSort(array, left, partitionIndex - 1);
//   }
// }

/* Merge sort */
//
// const merge = (left, right) => {
//   const result = [];
//   let l = 0;
//   let r = 0;
//   while (l < left.length && r < right.length) {
//     if (left[l] < right[r]) {
//       result.push(left[l]);
//       l = l + 1;
//     } else {
//       result.push(right[r]);
//       r = r + 1;
//     }
//   }
//   console.log('result is: ', result.concat(left.slice(l)).concat(right.slice(r)));
//   return result.concat(left.slice(l)).concat(right.slice(r));
// }
//
// const mergeSort = (array) => {
//   if (array.length < 2) {
//     return array;
//   }
//   const mid = Math.floor(array.length/2);
//   const left = array.slice(0, mid);
//   const right = array.slice(mid);
//   console.log('left is: ', left, ' and right is: ', right);
//   return merge(mergeSort(left), mergeSort(right));
// }

/* Sorting prac */

// merges two arrays into an ordered array
// const merge = (left, right) => {
//   let l = 0;
//   let r = 0;
//   const sorted = [];
//   while (l < left.length && r < right.length) {
//     if (left[l] < right[r]) {
//       sorted.push(left[l]);
//       l = l + 1;
//     } else {
//       sorted.push(right[r]);
//       r = r + 1;
//     }
//   }
//   return sorted.concat(left.slice(l)).concat(right.slice(r));
// }
//
// // takes an array - splits it recursively - calls merge on each split on the backwards return call
// const mergeSort = (array) => {
//   if (array.length < 2) {
//     return array;
//   }
//   const middle = Math.floor(array.length / 2);
//   const left = array.slice(0, middle);
//   const right = array.slice(middle);
//   return merge(mergeSort(left), mergeSort(right));
// }

/* QUick sort practice */

// so quicksort as an algorithm recursively splits up the array into pieces
// at each stage a pivot is used (the far right item) and elements are sorted around it as higer or lower
//
// const quicksort = (array, left, right) => {
//   if (left < right) {
//     const pivot = right;
//     const partitionIndex = partition(array, left, right, pivot);
//     quicksort(array, partitionIndex + 1, right);
//     quicksort(array, left, partitionIndex - 1);
//   }
//   return array;
// }
//
// // given a pivot - elements are sorted arround it - and the location of the pivot at the end is returned
// const partition = (array, left, right, pivot) => {
//   const partitionValue = array[pivot];
//   let newPartitionIndex = left;
//   let i = left;
//   for (; i < right; i++) {
//     if (array[i] < partitionValue) {
//       swap(array, i, newPartitionIndex);
//       newPartitionIndex = newPartitionIndex + 1;
//     }
//   }
//   swap(array, i, newPartitionIndex);
//   return newPartitionIndex;
// }

/* Selection sort */

// const selectionSort = (array) => {
//   for(let i=0; i<array.length; i++) {
//     let smallest = i;
//     for(let j=i; j<array.length; j++) {
//       if (array[j] < array[smallest]) {
//         smallest = j;
//       }
//     }
//     swap(array, i, smallest);
//   }
//   return array;
// }

/* Insertion sort */

// const insertionSort = (array) => {
//   for (let i = 0; i< array.length; i++) {
//     let j = i;
//     while(j > 0 && array[j] < array[j-1]) {
//       swap(array, j, j-1);
//       j = j - 1;
//     }
//   }
//   return array;
// }

// /* Binary Search - search alg which partitions the array into segments narrowing down its search */
// const sortedArray = [0,1,1,1,2,3,3,3,4,6,7,21,31,155,1245];
//
// const printSegment = (array, left, right) => {
//   const segment = [];
//   for (let i = left; i<right; i++) {
//     segment.push(array[i]);
//   }
//   console.log(segment);
// }
//
// const binarySearch = (array, element) => {
//   let left = 0;
//   let right = array.length - 1;
//   while (left <= right) {
//     printSegment(array, left, right);
//     const middle = left + Math.floor((right - left) / 2);
//     console.log('left is: ', left, ', right is: ', right, ' middle is: ', middle);
//     if (array[middle] === element) {
//       return middle;
//     } else if (array[middle] < element) {
//       left = middle + 1;
//     } else if (array[middle] > element) {
//       right = middle - 1;
//     }
//   }
//   return -1;
// }
//
// console.log(binarySearch(sortedArray, 6));

// const insertionSort = (array) => {
//   for(let i=0; i< array.length; i++) {
//     let j = i;
//     while(j > 0 && array[j] < array[j-1]) {
//       swap(array, j, j-1);
//       j = j - 1;
//     }
//   }
//   return array;
// }


/* insertionSort practice */

// const insertionSort = (array) => {
//   for(let i=0; i<array.length; i++) {
//     let j = i;
//     while (j > 0 & array[j-1] > array[j]) {
//       swap(array, j, j - 1);
//       j = j - 1;
//     }
//   }
//   return array;
// }
//
// const binarySearch = (array, element) => {
//   let left = 0;
//   let right = array.length - 1;
//   while (left <= right) {
//     const middle = left + Math.floor((right-left)/2);
//     if (array[middle] === element) {
//       return middle;
//     } else if (array[middle] < element) {
//       left = middle + 1;
//     } else if (array[middle] > element) {
//       right = middle - 1;
//     } else {
//       console.log('shouldnt be here');
//     }
//   }
//   return -1;
// }
//
// const sortedArray = [0,1,1,1,2,3,3,3,4,6,7,21,31,155,1245];
// console.log(binarySearch(sortedArray, 2));
//
// // put elements on the correct side of the partition and then return the partition index
// const partition = (array, left, right, partitionIndex) => {
//   const partitionValue = array[partitionIndex];
//   let newPartitionIndex = left;
//   let i=left;
//   for(;i<right;i++) {
//     if (array[i] < partitionValue) {
//       swap(array, i, newPartitionIndex);
//       newPartitionIndex = newPartitionIndex + 1;
//     }
//   }
//   swap(array, i, newPartitionIndex);
//   return newPartitionIndex;
// }
//
// // continuously splits up the array into smaller arrays for parition to work on
// const quickSort = (array, left, right) => {
//   if (left < right) {
//     const partitionIndex = partition(array, left, right, right);
//     quickSort(array, partitionIndex + 1, right);
//     quickSort(array, left, partitionIndex - 1);
//   }
//   return array;
// }

// const merge = (left, right) => {
//   let l = 0;
//   let r = 0;
//   const sort = [];
//   while (l < left.length && r < right.length) {
//     if (left[l] < right[r]) {
//       sort.push(left[l]);
//       l += 1;
//     } else {
//       sort.push(right[r]);
//       r += 1;
//     }
//   }
//   return sort.concat(left.slice(l)).concat(right.slice(r));
// }
//
// // reucrsively call mergesort which breaks arrays into smaller partitions
// // then on the recurse up call merge at every level
// const mergeSort = (array) => {
//   if (array.length < 2) {
//     return array;
//   }
//   const middle = Math.floor((array.length)/2);
//   const left = array.slice(0,middle);
//   const right = array.slice(middle);
//   return merge(mergeSort(left), mergeSort(right));
// }

// const countSort = (array, start, end) => {
//   const range = end - start;
//   const record = new Array(range);
//   record.fill(0);
//   for(let i=0; i<array.length; i++) {
//     record[array[i] - start] += 1;
//   }
//   const response = [];
//   for (let i=0; i<record.length; i++) {
//     while(record[i] > 0) {
//       response.push(i + start);
//       record[i] -= 1;
//     }
//   }
//   console.log(record);
//   console.log(response);
// }
//
// const unsortedArray = [10,14,12,12,15,17,19,11,12];
// countSort(unsortedArray, 10, 20);

const putInBucket = (buckets, element, interval, base, max) => {
  const bucketIndex = Math.floor((element - base) / interval);
//  console.log('bucketIndex is: ', bucketIndex, ' and buckets are: ', buckets);
  if (element === max) {
    buckets[bucketIndex - 1].push(element);
  } else {
    buckets[bucketIndex].push(element);
  }
}

const insertionSort = (array) => {
  for(let i=0; i<array.length; i++) {
    let j = i;
    while (j > 0 && array[j] < array[j-1]) {
      swap(array, j, j-1);
      j--;
    }
  }
  return array;
}

// problem to be aware of - we calculate the interval as max - min / noOfBuckets
// as a consequence min will always go in the first bucket which is fine
// max however is problematic - max divided by the interval will equal one greater than the number of buckets
// this needs to be dealt with somehow
// Options
// change the value of the max you passed when making the interval
// in the putting in bucket function handle explicityl the max value
const bucketSort = (array, numberOfBuckets) => {
  let max = array[0];
  let min = array[0];
  for (let i=1; i<array.length; i++) {
    if (array[i] < min) {
      min = array[i];
    }
    if (array[i] > max) {
      max = array[i];
    }
  }
  const buckets = new Array(numberOfBuckets);
  for(let i=0; i<buckets.length; i++) {
    buckets[i] = new Array(0);
  }
  const range = (max - min);
  const bucketInterval = range / numberOfBuckets;
  for (let i=0; i<array.length; i++) {
    putInBucket(buckets, array[i], bucketInterval, min, max);
  }
  let sorted = [];
  for (let i=0; i<buckets.length; i++) {
    insertionSort(buckets[i]);
    sorted = sorted.concat(buckets[i]);
  }
  return sorted;
}

// const unsortedArray = [100, 111, 200, 167,140, 112, 121, 129, 134,156,167,192];
// console.log('unsortedArray is: ', unsortedArray);
// const sortedArray = bucketSort(unsortedArray, 5);
// console.log('sortedArray is: ', sortedArray);

const toSort = ['asf', 'asd', 'fff', 'asdas', 'sseer', 'z'];

// steps:
// sort on first char
// for those that had the same first char - sort on the second char as them as a group
// repeat going through the chars
// a char ending counts as 0 in char values
const radixSort = (array) => {

}

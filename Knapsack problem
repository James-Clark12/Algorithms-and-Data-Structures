
/*

https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/

Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total
value in the knapsack. In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent
values and weights associated with n items respectively. Also given an integer W which represents knapsack
capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller
than or equal to W. You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).

// good explanation also here:
// https://medium.com/@fabianterh/how-to-solve-the-knapsack-problem-with-dynamic-programming-eb88c706d3cf

You can only use each item once
*/

/*
To memoize this we just need to use the two things that represent state weight used and item index
in a 2D array.

dp[weightUsed][itemIndex] = will tell use the max value that can be got with the remaining weight

*/

const knapSackProblem = (volume, weight, values) => {

    const optimize = (volumeUsed, itemIndex) => {
        // base cases
        // 1. filled the sack
        // 2. overfilled the sack
        // 3. used all items
        console.log('volumeUsed: ', volumeUsed, ' itemIndex: ', itemIndex);
        if (volumeUsed === volume) {
            return 0;
        } else if (volumeUsed > volume) {
            return -Infinity;
        } else if (itemIndex === weight.length) {
            return 0;
        } else {
            // two options - use item or dont use item
            return Math.max(
                // use item
                optimize(volumeUsed + weight[itemIndex], itemIndex+1) + values[itemIndex],
                // dont use item
                optimize(volumeUsed, itemIndex+1)
            )
        }
    }
    return optimize(0, 0);
}

console.log(
    knapSackProblem(
        10,
        [3,4,4,2,1],
        [3,4,5,10,4]
    )
)

/* Tabulation answer - Does make sense and is a 2D pattern we should get comfortable with - its just like the 
train ticket problem but in two dimension */

const knapSackProblem = (weight, itemsWeights, itemsValues) => {

    
    // columns are weights from 0 to desired weight
    // rows are 0 (no items) to items.length - 1 index array of the items

    // dp[r][c] = is the maximum value it is possible to get using the weight C and all the items in the array up to R
    
    // for a given dp[r][c] its value is = the max that can be obtained by using that weight or not using that weight
    // in terms of the table we can define this as:
    // ** - assuming the weight isnt greater than the capcity you have
    // dp[r][c] = Math.max(
        // obtain max using weight r
            // value is the value of the weight plus the max value we can get with the remaining weight
            //value + dp[r-1][Math.max(0,c-weight)] **note since we need 0 values to build are tables
            // the weight array is 1 indexed so weight will be weights[r-1] and value will be values[r-1]
        // max value without using weight r
            //dp[r-1][c]
        //)
    // ** - if the weight is greater than the capcity you have then the max you can obtain with dp[r][c] is:
    // dr[r-1][c]

    // in code this will look like:
    /*

    for (i = 0; i <= n; i++) 
    { 
        for (w = 0; w <= W; w++) 
        { 
            if (i==0 || w==0) 
                K[i][w] = 0; 
            else if (wt[i-1] <= w) 
                    K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]); 
            else
                    K[i][w] = K[i-1][w]; 
        } 
    } 

    */
}

console.log(
    knapSackProblem(
        10,
        [3,4,4],
        [3,4,5]
    )
)

// 1. Max Heapify
// 2. Build Max Heap
// 3. Heap sort
// 4. Parent, Left, Right
//
// */
//
// const ValidHeapChecker = (array) => {
//   // rule for valid heap is parent is never less than child
//   for (let i=0; i<array.length; i++) {
//     const leftChild = Left(i);
//     const rightChild = Right(i);
//     if (array[leftChild] !== undefined) {
//       if (array[leftChild] > array[i]) {
//         return false;
//       }
//     }
//     if (array[rightChild] !== undefined) {
//       if (array[rightChild] > array[i]) {
//         return false;
//       }
//     }
//   }
//   return true;
// }
//
// const Parent = (i) => {
//   return Math.ceil(i/2 - 1)
// }
//
// const Left = (i) => {
//   return i*2 + 1;
// }
//
// const Right = (i) => {
//   return i*2 + 2;
// }
//
// const MaxHeapify = (array, i) => {
//   // what does this func do? - Checks that an element is not higher than it should be
//   let l = Left(i);
//   let r = Right(i);
//   let largest = i;
//
//   if (l < array.length && array[i] < array[l]) {
//     largest = l;
//   }
//   if (r < array.length && array[r] > array[largest]) {
//     largest = r;
//   }
//   if (i !== largest) {
//     const temp = array[largest];
//     array[largest] = array[i];
//     array[i] = temp;
//     MaxHeapify(array, largest);
//   }
// }
//
// const MaxHeapifyWithSize = (array, i, heapSize) => {
//   // what does this func do? - Checks that an element is not higher than it should be
//   let l = Left(i);
//   let r = Right(i);
//   let largest = i;
//
//   if (l < heapSize && array[i] < array[l]) {
//     largest = l;
//   }
//   if (r < heapSize && array[r] > array[largest]) {
//     largest = r;
//   }
//   if (i !== largest) {
//     const temp = array[largest];
//     array[largest] = array[i];
//     array[i] = temp;
//     MaxHeapifyWithSize(array, largest, heapSize);
//   }
// }
//
// const BuildMaxHeap = (array) => {
//   let parentPointer = Parent(array.length - 1);
//   while (parentPointer > -1) {
//     MaxHeapify(array, parentPointer);
//     parentPointer = parentPointer - 1;
//   }
// }
//
// const HeapSortAlgorithm = (array) => {
//   BuildMaxHeap(array);
//   const sorted = [];
//   while(array.length > 0) {
//     console.log('array length is: ', array.length, ' pushing element: ', array[0]);
//     sorted.unshift(array[0]);
//     const temp = array[array.length - 1];
//     array[array.length - 1] = array[0];
//     array[0] = temp;
//     array.length = array.length - 1;
//     MaxHeapify(array, 0);
//   }
//   console.log('Sorted array is: ', sorted);
// }
//
// const HeapSortAlgorithmWithSize = (array) => {
//   BuildMaxHeap(array);
//   let heapSize = array.length - 1;
//   while(heapSize > 0) {
//     console.log('array is: ', array);
//     const temp = array[heapSize];
//     array[heapSize] = array[0];
//     array[0] = temp;
//     heapSize = heapSize - 1;
//     console.log('heapSize');
//     MaxHeapifyWithSize(array, 0, heapSize);
//   }
// }
//
// /*
// Insert
// Extract Max
// Increase Key
// */
//
// const ExtractMax = (array) => {
//   const max = array[0];
//   array[0] = array[array.length - 1];
//   array.length = array.length - 1;
//   MaxHeapifyWithSize(array, 0, array.length);
//   return max;
// }
//
// const IncreaseKey = (array, index, key) => {
//   if (key < array[index]) {
//     return 'error';
//   }
//   array[index] = key;
//   while (array[index] > array[Parent(index)] && index > 0) {
//     const temp = array[index];
//     array[index] = array[Parent(index)];
//     array[Parent(index)] = temp;
//     index = Parent(index);
//   }
// }
//
// const MaxHeapInsert = (array, element) => {
//   array[array.length] = 0;
//   IncreaseKey(array, array.length - 1, element);
// }
//
// // const heapArray = [2,5,1,5,3,2,7,9,1,3,5,8,0];
// // BuildMaxHeap(heapArray);
// // console.log('Heap array is: ', heapArray);
// // ExtractMax(heapArray);
// // console.log('Heap array is: ', heapArray);
// // MaxHeapInsert(heapArray, 12);
// // console.log('Heap array is: ', heapArray);
//

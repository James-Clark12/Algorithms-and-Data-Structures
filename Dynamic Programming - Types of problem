Dynamic Programming - The Nature of the Problems

-Whenever solving a DP problem is challenging go back to basics. What are the properties that make a problem solvable by DP?

1) Overlapping Subproblems - solutions of same subproblems are needed again and again - and thus we can save time by storing them via tabulation or memoization
2) Optimal Substructure  - A given problems has Optimal Substructure Property if optimal solution of the given problem can be obtained by using optimal solutions of its subproblems.

Once a problem has been identified as DP the first thing we need to do in order to solve it is work outs its state.

A state can be defined as the set of parameters that can uniquely identify a certain position or standing in the given problem.
i.e. in the climbing stairs problem this is what step we are on.

Once we have defined the state - we do the bulk of the work of solving the problem by working out the relation between previous states to reach the current state.
This is the recurrence relation - it takes advantage of properties 1 and 2 of DP problems and is the answer to the question:
How can the answer to one problem be given by answer to sub-problems.
e.g. for the number of ways to climb some steps taking either 1 or 2 steps each time - dp[i] is simply dp[i-1] + dp[i-2]

Once we have solved the subproblem relation - tabulation and memoization is easy - we just store the the answers to subproblems using their state to define them
and use those answers to solve the larger problems.

Dynamic Programming - Types of problem

1.  Finding the Min/ Max path to a target

Classic examples

-climbing stairs - https://leetcode.com/problems/min-cost-climbing-stairs/
-coin change - https://leetcode.com/problems/coin-change/
-minimum cost of tickets - https://leetcode.com/problems/minimum-cost-for-tickets/

One of the simpler set of problems imo.

Use top-down and memoization to find the max/ min route. This should define the relation
that can be used in tabulation. dp[i] will be the max/ min of some previous i's 
depending on the recurrence relation defined.


2. Finding the number of unique paths to something

Classic examples

-climing stairs - no. of ways - https://leetcode.com/problems/climbing-stairs/
-unique paths - https://leetcode.com/problems/unique-paths/
-Combination sum - https://leetcode.com/problems/combination-sum-iv/

Very similar to finding the max/ min path to a target - except you summ the number
of routes that make it to the target.

3. Longest Increasing Subsequence ** these are challenging - need more practice

This might not initially seem like a DP problem but it is. The reason being that for some i in the
array - the length of the increasing subsequence to it - is the largest LIS up to any element
before it that is smaller than it.

i.e. the relation is:

LIS[i] = Math.max(1, LIS[j]) <-- where j is an index before i, and LIS[j] is an element smaller than LIS[i]

Classic examples

Longest Increasing Subsequence - https://leetcode.com/problems/longest-increasing-subsequence/
Maximum Length of Pair Chain - (LIS with a twist) - https://leetcode.com/problems/maximum-length-of-pair-chain/ 
Number of Longest Increasing Subsequence - https://leetcode.com/problems/number-of-longest-increasing-subsequence/

4. Sliding Window Problems

Once you understand how to use the window these are actually fairly easy.

This is a great tutorial on them: https://medium.com/@timpark0807/leetcode-is-easy-sliding-window-c44c11cc33e1

Anything that asks for a subrange within an array is likely a window problem.

Max Consecutive Ones II - https://leetcode.com/problems/max-consecutive-ones-ii/
Longest Substring with At Most Two Distinct Characters - https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/
Longest Substring Without Repeating Characters - https://leetcode.com/problems/longest-substring-without-repeating-characters/
Minimum Window Substring - https://leetcode.com/problems/minimum-window-substring/
Subarray Product Less Than K - https://leetcode.com/problems/subarray-product-less-than-k/ **Challenging problem

5. Maximum SubArray Sum - Kadane's algorithm

Just a single type of problem that can be solved very easily using DP. Not sure why it has it's own name as it is just DP.

The problem is: Given an array, find the maximum subarray sum.

Kadane's algorithm simply says: for

// note this if a contiguous subarray - for non-contiguous you would need a different relation

dp[i] = max(dp[i-1],0) + arr[i] //also can write as dp[i] = max(dp[i-1] + arr[i], arr[i])

Good article on the problem here: https://hackernoon.com/kadanes-algorithm-explained-50316f4fd8a6

Examples

Maximum Subarray - https://leetcode.com/problems/maximum-subarray/
Maximum Product Subarray - https://leetcode.com/problems/maximum-product-subarray/

6. Knapsack problems

These are in someways similar to type 1 problems in that you are trying to maximise something - but differ in that
you can only use each of the options you have a limited number of times.

These initially seem very challenging but they are intuitive and are just like the train ticket problem except you
need to work in two dimensions - 0 to amount, and from option 0 to option N (i.e. the items you can put in your bag,
or the coins you can choose).

Classic knapsack problem - https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/

Q518 Coin Change 2 - https://leetcode.com/problems/coin-change-2/ (like a knapsack problem but counting unique ways)
Q343 Integer Break - https://leetcode.com/problems/integer-break/

*** Knapsack problems often come in the guise of two sets that need to be equalled - these are just knapsack problems with a twist

494. Target Sum - https://leetcode.com/problems/target-sum/
416. Partition Equal Subset Sum - https://leetcode.com/problems/partition-equal-subset-sum/

All numbers in JS are stored as 64-bit IEEE precision floats - but when you perform bit operations on them they are transformed to 32
bit numbers, the operation is carried out and then they are converted back

/* In addition to this should be comfortable with binary maths - adding, subtracting, multiplying and dividing

Best refresher for that - http://www.binarymath.info/binary-division.php

/* If creating a bit vector recording flags - easiest thing to do is actually create a btye verctor (which is 8x less efficient) but 8x
easier to write - can say that could write a bit vector but in js it is fiddly - but should offer to do it */
** Easiest is to just use a normal var - it is a 64 bit value free to edit with the operations below - not sure if typed arrays
are really any use for the purposes of academic bit maths (example of bit vector at the bottom)

/* Flip bits (more reliable than ~ as you specify how many bits you are flipping)

  var flipbits = function (v, digits) {
      return ~v & (Math.pow(2, digits) - 1);
  }

/* To convert from binary string to decimal

var sBinString = '1011';
var nMyNumber = parseInt(sBinString, 2);

To convert from decimal to binary

var nMyNumber = 11;
var sBinString = nMyNumber.toString(2);

/* Check if a power of two
 
If a number is a power of 2 there will be one bit set to 1 and the rest - - e.g. 8 === 0b1000
So if we minus 1 from the number (turning all the 0's to 1's and the 1 to 0) and then & with itself it should 
return - if it is a power of 2
 
*/

export default function isPowerOfTwo(number) {
  return (number & (number - 1)) === 0;
}

/* Count Set Bits
This method counts the number of set bits in a number using bitwise operators. The main idea is that we shift
the number right by one bit at a time and check the result of & operation that is 1 if bit is set and 0 otherwise.

Useful if using a bit vector to count instances
*/

export default function countSetBits(originalNumber) {
  let setBitsCount = 0;
  let number = originalNumber;

  while (number) {
    // Add last bit of the number to the sum of set bits.
    setBitsCount += number & 1;

    // Shift number right by one bit to investigate other bits.
    number >>= 1;
  }

  return setBitsCount;
}

/* Get Bit - returns the value of the bit

Simple operation - move bit to start and & with 1 - returns 1 if there was a 1 and returns 0 if there was not

export default function getBit(number, bitPosition) {
  return (number >> bitPosition) & 1;
}

/* If statements with bits as flags

A bitmask is a sequence of bits that can manipulate and/or read flags. Typically, a "primitive" bitmask for each flag is defined:

var FLAG_A = 1; // 0001
var FLAG_B = 2; // 0010
var FLAG_C = 4; // 0100
var FLAG_D = 8; // 1000

We can use a mask to check if a flag is set

// if we own a cat
if (flags & FLAG_C) { // 0101 & 0100 => 0100 => true
   // do stuff
}

A bitmask with multiple set flags acts like an "either/or". For example, the following two are equivalent:

// if we own a bat or we own a cat
// (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true
if ((flags & FLAG_B) || (flags & FLAG_C)) {
   // do stuff
}



*/

/* Sets a bit to 1

export default function setBit(number, bitPosition) {
  return number | (1 << bitPosition);
}

*/

/* Sets a bit to 0

Make a mask - (set of bits where all 1 except in location we want to clear)

export default function clearBit(number, bitPosition) {
  const mask = ~(1 << bitPosition);

  return number & mask;
}

*/

/* Update a bit to a value

Seems more complex that just using set and clear

export default function updateBit(number, bitPosition, bitValue) {
  // Normalized bit value.
  const bitValueNormalized = bitValue ? 1 : 0;

  // Init clear mask.
  const clearMask = ~(1 << bitPosition);

  // Clear bit value and then set it up to required value.
  return (number & clearMask) | (bitValueNormalized << bitPosition);
}

/*
To check if even - check if the last bit is 1 or 0
To check if positive or negative - check if first bit is 1 (meaning it is negative (two's complement))

Q - count the number of numbers that aren't unique in an array - solve with bit vector and byte vector
/* Question - given a string of lowercase letters record how many of the letters are not unique */

const input = 'asdkjasfkjasdkjadjnsglkasbduaoswewegknbasfowegnsdguewfblkmxcnviahgfz';
let bitRecord = 0;

const notUniqueCounter = (input) => {
  for (let i=0; i<input.length; i++) {
    const index = input.charCodeAt(i) - 97;
    if (getBit(bitRecord, index)) {
      console.log('The letter: ', input[i], ' is duplicated.');
    } else {
      bitRecord = setBit(bitRecord, index);
    }
  }
}

notUniqueCounter(input);

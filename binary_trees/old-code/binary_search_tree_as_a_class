
// Node class 
class Node 
{ 
    constructor(data) 
    { 
        this.data = data; 
        this.left = null; 
        this.right = null; 
    } 
}

// Binary Search tree class 
class BinarySearchTree { 
    constructor() 
    { 
        // root of a binary seach tree 
        this.root = null; 
    } 

    // helper method which creates a new node to be inserted and calls insertNode 
    insert(data) { 
        // Creating a node and initailising with data 
        var newNode = new Node(data); 
        // root is null then node will be added to the tree and made root. 
        if(this.root === null) 
            this.root = newNode; 
        else
            // find the correct position in the tree and add the node 
            this.insertNode(this.root, newNode); 
    } 

    // Method to insert a node in a tree  
    insertNode(node, newNode) { 
        // if the data is less than the node data move left of the tree 
        if(newNode.data < node.data) { 
            // if left is null insert node here 
            if(node.left === null) 
                node.left = newNode; 
            else

                // if left is not null recurr until null is found 
                this.insertNode(node.left, newNode); 
        } 
        // if the data is more than the node data move right of the tree 
        else
        { 
            // if right is null insert node here 
            if(node.right === null) 
                node.right = newNode; 
            else

                // if right is not null recurr until null is found 
                this.insertNode(node.right,newNode); 
        } 
    } 

    remove(data) { 
        // root is re-initialized with root of a modified tree.
        this.root = this.removeNode(this.root, data); 

        /* what do we mean by reinitialisation here? - Well we only every store the root of the tree
        and everything else stems from that.
        The removeNode function is recursive and returns a node, what it does in the remove case
        is recurse down from root until it finds the node to be deleted - return null there - 
        and recurse up. On each return recursing up each nodes value is set to whatever it was */
    } 

    // Removing nodes has to be done like this
    // you can just move down the tree like a pointer, find a node, and then assign it an entirely new object
    // as you only have your reference 
    // you will update your reference not the actual tree
    // if I have: 
    // var foo = {val: 10}
    // var bar = foo;
    // I can not update the value of foo just by using var
    // I would just be updating bar
    // I need access to foo to change foo
    // that is why this recursive method is necessary
    // when you recurse down the tree you are accessing the actual nodes
    // Note - you could iterate down the tree rather than recurse
    // recursion is just convenient

    // Method to remove node with given value
    removeNode(node, key) { 

        // if the root is null then tree is  
        // empty 
        if(node === null) {
            return null; 
        }
        // if data to be delete is less than roots data then move to left subtree 
        else if(key < node.data) { 
            node.left = this.removeNode(node.left, key); 
            return node; 
        }   
        // if data to be delete is greater than roots data then move to right subtree 
        else if(key > node.data) { 
            node.right = this.removeNode(node.right, key); 
            return node; 
        // have found the node we were looking for
        } else {

            // CASE 0 - Node not present in tree 
            if(node === null) {
                return null; 
            }

            // CASE 1. has no children
            if(node.left === null && node.right === null) { 
                node = null; 
                return node; //returns up to the function which sets the nodes value
            } 

            // CASE 2. deleting node with one children 
            if(node.left === null) { 
                node = node.right; 
                return node; //returns up to the function which sets the nodes value
            } 
            if(node.right === null) { 
                node = node.left; 
                return node; //returns up to the function which sets the nodes value
            } 

            // CASE 3: Deleting node with two children 
            //1. Get the node to be deleted's successor - this is the smallest element greater than the node to be deleted  (just the min of the node right subtree)
            //2. Overwrite the value of the node to be deleted with the value of the successor
            //3. Call the delete funcion again on the successor node's position (so the delete function is called recursively until a node can be removed according to cases
            //1 and 2 rather than 3)
            const temp = this.findMinNode(node.right); // this func is also recursive directly returns the element
            node.data = temp.data; 
            node.right = this.removeNode(node.right, temp.data); 
            return node; //returns up to the function which sets the nodes value
        }
    }

    // Performs inorder traversal of a tree 
    
    // these traversal methods all move along the tree in the same order
    // the difference is at what point in their recursiion stack they print the node value
    // inOrder prints after having vistited all the left children of a node
    // preOrder prints before visiting a nodes children
    // postOrder prints after having visited all a node's children
    
    inorder(node)  { 
        if(node !== null) 
        { 
            this.inorder(node.left); 
            console.log(node.data); 
            this.inorder(node.right); 
        } 
    }

    // Performs preorder traversal of a tree	 
    preorder(node)  { 
        if(node !== null) 
        { 
            console.log(node.data); 
            this.preorder(node.left); 
            this.preorder(node.right); 
        } 
    }

    // Performs postorder traversal of a tree 
    postorder(node) { 
        if(node !== null) { 
            this.postorder(node.left); 
            this.postorder(node.right); 
            console.log(node.data); 
        } 
    } 

    //  finds the minimum node in tree starting from given node 
    findMinNode(node) { 
        // if left of a node is null then it must be minimum node 
        if(node.left === null) 
            return node; 
        else
            return this.findMinNode(node.left); 
    }

    //  finds the max node in tree searching starts from given node 
    findMaxNode(node) { 
        // if right of a node is null then it must be max node 
        if(node.right === null) 
            return node; 
        else
            return this.findMinNode(node.right); 
    }

    // returns root of the tree 
    getRootNode() { 
        return this.root; 
    } 

    // search/ find the node with the given data 
    search(node, data) { 
    // if trees is empty return null 
        if(node === null) 
            return null; 
    
        // if data is less than node's data move left 
        else if(data < node.data) 
            return this.search(node.left, data); 
    
        // if data is less than node's data move left 
        else if(data > node.data) 
            return this.search(node.right, data); 
    
        // if data is equal to the node data return node 
        else
            return node; 
    } 
}

// create an object for the BinarySearchTree 
var BST = new BinarySearchTree(); 
  
// Inserting nodes to the BinarySearchTree 
BST.insert(15); 
BST.insert(25); 
BST.insert(10); 
BST.insert(7); 
BST.insert(22); 
BST.insert(17); 
BST.insert(13); 
BST.insert(5); 
BST.insert(9); 
BST.insert(27); 
                          
//          15 
//         /  \ 
//        10   25 
//       / \   / \ 
//      7  13 22  27 
//     / \    / 
//    5   9  17  
  
var root = BST.getRootNode(); 
              
// prints 5 7 9 10 13 15 17 22 25 27 
console.log("preorder traversal"); 
BST.inorder(root); 
            
// Removing node with no children  
BST.remove(5);
BST.remove(9);
BST.remove(25);
// console.log("preorder traversal"); 

console.log("preorder traversal"); 
BST.inorder(root); 
              
// //          15 
// //         /  \ 
// //        10   25 
// //       / \   / \ 
// //      7  13 22  27 
// //       \    / 
// //        9  17  
              
                          
// var root = BST.getRootNode(); 
              
// // prints 7 9 10 13 15 17 22 25 27 
// BST.inorder(root); 
              
// // Removing node with one children  
// BST.remove(7); 
              
// //          15 
// //         /  \ 
// //        10   25 
// //       / \   / \ 
// //      9  13 22  27 
// //            / 
// //           17  
              
              
// var root = BST.getRootNode(); 
  
// // prints 9 10 13 15 17 22 25 27 
// BST.inorder(root); 
              
// // Removing node with two children  
// BST.remove(15); 
      
// //          17 
// //         /  \ 
// //        10   25 
// //       / \   / \ 
// //      9  13 22  27 
  
// var root = BST.getRootNode(); 
// console.log("inorder traversal"); 
  
// // prints 9 10 13 17 22 25 27 
// BST.inorder(root); 
              
// console.log("postorder traversal"); 
// BST.postorder(root); 
// console.log("preorder traversal"); 
// BST.preorder(root); 
